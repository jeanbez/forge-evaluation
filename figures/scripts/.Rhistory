'1536-32-0-0-1024-1' = 'Scenario A',
'1536-32-0-0-128-1' = 'Scenario B',
'1536-32-1-0-1024-1' = 'Scenario C',
'1536-32-1-0-4096-1' = 'Scenario D',
'1536-32-1-1-512-1' = 'Scenario E',
'192-16-1-0-32-1' = 'Scenario F',
'192-16-1-1-128-1' = 'Scenario G',
'192-8-0-0-8192-1' = 'Scenario H',
'192-8-1-1-8192-1' = 'Scenario I',
'384-16-1-0-128-1' = 'Scenario J',
'384-16-1-0-8192-1' = 'Scenario K',
'384-32-1-1-4096-1' = 'Scenario L',
'384-32-1-1-512-1' = 'Scenario M',
'384-8-1-0-4096-1' = 'Scenario N',
'768-16-1-0-1024-1' = 'Scenario O',
'768-32-1-0-1024-1' = 'Scenario P',
'768-16-1-1-1024-1' = 'Scenario Q',
'96-8-0-0-8192-1' = 'Scenario R',
'96-8-1-1-6144-1' = 'Scenario S',
'96-8-1-0-512-1' = 'Scenario T'
))
library(ggplot2)
plot <- ggplot(df_full[df_full$operation == 'write', ],
aes(
x = as.factor(forwarders),
y = bandwidth
)) +
geom_boxplot() +
scale_color_manual(
"",
values = c(
"#796dd5",
"#6dd5c7",
"#afd56d",
"#ef4130",
"#222222"
)
) +
facet_wrap(. ~ scenario_name, scales = "free", ncol = 4) +
expand_limits(y = 0) +
ylab("Bandwidth (MB/s)") +
xlab("I/O Forwarding nodes") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title.y = element_text(vjust = 0.4),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-2.pdf", width = 5, height = 6.5)
plot
dev.off()
df_forwarding <- read.csv(file = "../../run/output/marenostrum-4/results/results.csv", sep = ";")
df_gpfs <- read.csv(file = "../../run/output/marenostrum-4-gpfs/results/results.csv", sep = ";")
df <- rbind(df_forwarding, df_gpfs)
str(df)
df_full <- df
df_full$layout_name <- revalue(as.factor(df_full$layout), c(
"0" = 'file-per-process',
"1" = 'shared-file'
))
df_full$spatiality_name <- revalue(as.factor(df_full$spatiality), c(
"0" = 'contiguous',
"1" = 'strided'
))
df_full$scenario <- paste(sep = '-', df_full$processes, df_full$clients, df_full$layout, df_full$spatiality, df_full$request, df_full$odirect)
results <- data.frame(
'scenario' = factor(),
'comparison '= factor(),
'p.value' = double()
)
results_choices <- data.frame(
'scenario' = factor(),
'options' = list()
)
for (scenario in unique(df_full$scenario)) {
data <- df_full[df_full$scenario == scenario, ]
fwd_0 <- data[data$forwarders == 0, ]$bandwidth
fwd_1 <- data[data$forwarders == 1, ]$bandwidth
fwd_2 <- data[data$forwarders == 2, ]$bandwidth
fwd_4 <- data[data$forwarders == 4, ]$bandwidth
fwd_8 <- data[data$forwarders == 8, ]$bandwidth
dunn_result <- dunn.test(list(fwd_0, fwd_1, fwd_2, fwd_4, fwd_8))
tmp <- data.frame(
dunn_result$comparisons,
dunn_result$Z
)
names(tmp) <- c('comparison', 'p')
tmp$comparison <- revalue(
tmp$comparison,
c(
'1 - 2' = '0 vs. 1',
'1 - 3' = '0 vs. 2',
'1 - 4' = '0 vs. 4',
'1 - 5' = '0 vs. 8',
'2 - 3' = '1 vs. 2',
'2 - 4' = '1 vs. 4',
'2 - 5' = '1 vs. 8',
'3 - 4' = '2 vs. 4',
'3 - 5' = '2 vs. 8',
'4 - 5' = '4 vs. 8'
)
)
# Dunn H0 is that the samples come from populations that follow the same distribution
# We reject H0 when p <= alpha, i.e., if p > alpha we could (forced definition) say that "they come from similar distributions" (NOTICE: this is not exactly the TRUTH)
results <<- rbind( # we need the two << to access the variable that is out of the scope
results,
data.frame(
'scenario' = as.factor(scenario),
'comparison' = as.factor(tmp$comparison),
'p.value' = tmp$p
)
)
options <- c(0, 1, 2, 4, 8)
for (option in sort(tmp[tmp$p > 0.05, ]$comparison, decreasing = TRUE)) {
pair <- option %>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
options[options == pair[2]] <- pair[1]
}
results_choices <<- rbind(
results_choices,
data.frame(
'scenario' = as.factor(scenario),
'options' = paste(unlist(unique(options)), collapse = ', ')
)
)
}
library(plyr)
library(dplyr)
library(stringr)
library(dunn.test)
df_full <- df
df_full$layout_name <- revalue(as.factor(df_full$layout), c(
"0" = 'file-per-process',
"1" = 'shared-file'
))
df_full$spatiality_name <- revalue(as.factor(df_full$spatiality), c(
"0" = 'contiguous',
"1" = 'strided'
))
df_full$scenario <- paste(sep = '-', df_full$processes, df_full$clients, df_full$layout, df_full$spatiality, df_full$request, df_full$odirect)
results <- data.frame(
'scenario' = factor(),
'comparison '= factor(),
'p.value' = double()
)
results_choices <- data.frame(
'scenario' = factor(),
'options' = list()
)
for (scenario in unique(df_full$scenario)) {
data <- df_full[df_full$scenario == scenario, ]
fwd_0 <- data[data$forwarders == 0, ]$bandwidth
fwd_1 <- data[data$forwarders == 1, ]$bandwidth
fwd_2 <- data[data$forwarders == 2, ]$bandwidth
fwd_4 <- data[data$forwarders == 4, ]$bandwidth
fwd_8 <- data[data$forwarders == 8, ]$bandwidth
dunn_result <- dunn.test(list(fwd_0, fwd_1, fwd_2, fwd_4, fwd_8))
tmp <- data.frame(
dunn_result$comparisons,
dunn_result$Z
)
names(tmp) <- c('comparison', 'p')
tmp$comparison <- revalue(
tmp$comparison,
c(
'1 - 2' = '0 vs. 1',
'1 - 3' = '0 vs. 2',
'1 - 4' = '0 vs. 4',
'1 - 5' = '0 vs. 8',
'2 - 3' = '1 vs. 2',
'2 - 4' = '1 vs. 4',
'2 - 5' = '1 vs. 8',
'3 - 4' = '2 vs. 4',
'3 - 5' = '2 vs. 8',
'4 - 5' = '4 vs. 8'
)
)
# Dunn H0 is that the samples come from populations that follow the same distribution
# We reject H0 when p <= alpha, i.e., if p > alpha we could (forced definition) say that "they come from similar distributions" (NOTICE: this is not exactly the TRUTH)
results <<- rbind( # we need the two << to access the variable that is out of the scope
results,
data.frame(
'scenario' = as.factor(scenario),
'comparison' = as.factor(tmp$comparison),
'p.value' = tmp$p
)
)
options <- c(0, 1, 2, 4, 8)
for (option in sort(tmp[tmp$p > 0.05, ]$comparison, decreasing = TRUE)) {
pair <- option %>% str_match_all("[0-9]+") %>% unlist %>% as.numeric
options[options == pair[2]] <- pair[1]
}
results_choices <<- rbind(
results_choices,
data.frame(
'scenario' = as.factor(scenario),
'options' = paste(unlist(unique(options)), collapse = ', ')
)
)
}
data.frame(count(results_choices, options))
data.frame(count(results_choices, options))
df_bandwidths <- ddply(df_full, .(scenario, forwarders), summarize,
bandwidth = mean(bandwidth)
)
df_bandwidths <- ddply(df_full, .(scenario, forwarders), summarize,
bandwidth = mean(bandwidth)
)
df_bandwidths
results_choices$count <- sapply(str_split(results_choices$options, ','), length)
str(results_choices)
results_choices$count
df_plot_options <- data.frame(count(results_choices, count))
df_plot_options$n <- as.numeric(as.character(df_plot_options$n))
df_plot_options <- df_plot_options[order(df_plot_options$n), ]
library(ggplot2)
plot <- ggplot(df_plot_options,
aes(
x = count,
y = n,
label = n
)) +
geom_bar(stat = "identity", fill = "#255D83") +
geom_text(nudge_y = 5, size = 3.5) +
expand_limits(y = 90) +
xlab("Number of choices") +
ylab("Number of patterns") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title = element_text(size = 10),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-3-a.pdf", width = 5, height = 6.5)
plot
dev.off()
library(ggplot2)
plot <- ggplot(df_plot_options,
aes(
x = count,
y = n,
label = n
)) +
geom_bar(stat = "identity", fill = "#255D83") +
geom_text(nudge_y = 5, size = 3.5) +
expand_limits(y = 90) +
xlab("Number of choices") +
ylab("Number of patterns") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title = element_text(size = 10),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-3-a.pdf", width = 2, height = 2)
plot
dev.off()
library(plyr)
library(dplyr)
library(stringr)
df_forwarding <- read.csv(file = "../../run/output/marenostrum-4/results/results.csv", sep = ";")
df_gpfs <- read.csv(file = "../../run/output/marenostrum-4-gpfs/results/results.csv", sep = ";")
df <- rbind(df_forwarding, df_gpfs)
str(df)
aux <- as.data.frame(
df_full %>%
group_by(scenario) %>%
slice(which.max(bandwidth))
)
aux <- subset(aux, select = c(scenario, forwarders, bandwidth))
aux
unique(aux$forwarders)
best_choices <- data.frame(count(aux, forwarders))
best_choices
best_choices <- data.frame(count(aux, forwarders))
best_choices
aux <- as.data.frame(
df_full %>%
group_by(scenario) %>%
slice(which.max(bandwidth))
)
aux <- subset(aux, select = c(scenario, forwarders, bandwidth))
aux
best_choices <- data.frame(count(aux, forwarders))
best_choices
library(ggplot2)
plot <- ggplot(best_choices,
aes(
x = as.factor(forwarders),
y = n,
label = n
)) +
#scale_y_continuous(breaks = seq(0, 65, 5)) +
geom_bar(stat = "identity", fill = "#255D83") +
geom_text(nudge_y = 5, size = 3.5) +
expand_limits(y = 90) +
xlab("Number of I/O nodes") +
ylab("Number of patterns") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title = element_text(size = 10),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-3-b.pdf", width = 2, height = 2)
plot
dev.off()
library(plyr)
library(dplyr)
df_forwarding <- read.csv(file = "../../run/output/marenostrum-4/results/results.csv", sep = ";")
df_gpfs <- read.csv(file = "../../run/output/marenostrum-4-gpfs/results/results.csv", sep = ";")
df <- rbind(df_forwarding, df_gpfs)
str(df)
df_forge_to <- ddply(df, .(forwarders, clients, processes, operation, layout, spatiality, odirect, request, total), summarize,
N = length(forwarders),
mean_time = mean(time),
sd_time = sd(time),
se_time = 2 * sd_time / sqrt(N),
median_time = median(time),
mean_bandwidth = mean(bandwidth),
sd_bandwidth = sd(bandwidth),
se_bandwidth = 2 * sd_bandwidth / sqrt(N),
median_bandwidth = median(bandwidth)
)
df_forge_to$layout_name <- revalue(as.factor(df_forge_to$layout), c(
"0" = 'file-per-process',
"1" = 'shared-file'
))
df_forge_to$spatiality_name <- revalue(as.factor(df_forge_to$spatiality), c(
"0" = 'contiguous',
"1" = 'strided'
))
str(df_forge_to)
df_selected <- df_forge_to
df_selected$scenario <- paste(sep = '-', df_selected$processes, df_selected$clients, df_selected$layout, df_selected$spatiality, df_selected$request, df_selected$odirect)
unique(df_selected$forwarders)
unique(df_selected$clients)
unique(df_selected$processes)
unique(df_selected$layout)
unique(df_selected$spatiality)
unique(df_selected$request)
unique(df_selected$odirect)
length(unique(df_selected$scenario))
df_full <- df
df_full$layout_name <- revalue(as.factor(df_full$layout), c(
"0" = 'file-per-process',
"1" = 'shared-file'
))
df_full$spatiality_name <- revalue(as.factor(df_full$spatiality), c(
"0" = 'contiguous',
"1" = 'strided'
))
df_full$scenario <- paste(sep = '-', df_full$processes, df_full$clients, df_full$layout, df_full$spatiality, df_full$request, df_full$odirect)
library(ggplot2)
plot <- ggplot(df_full[df_full$operation == 'write', ],
aes(
x = as.factor(forwarders),
y = bandwidth
)) +
geom_boxplot() +
scale_color_manual(
"",
values = c(
"#796dd5",
"#6dd5c7",
"#afd56d",
"#ef4130",
"#222222"
)
) +
facet_wrap(. ~ scenario, scales = "free", ncol = 4) +
expand_limits(y = 0) +
ylab("Bandwidth (MB/s)") +
xlab("I/O Forwarding nodes") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title.y = element_text(vjust = 0.4),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-2-complete.pdf", width = 10, height = 25)
plot
dev.off()
library(ggplot2)
plot <- ggplot(df_full[df_full$operation == 'write', ],
aes(
x = as.factor(forwarders),
y = bandwidth
)) +
geom_boxplot() +
scale_color_manual(
"",
values = c(
"#796dd5",
"#6dd5c7",
"#afd56d",
"#ef4130",
"#222222"
)
) +
facet_wrap(. ~ scenario, scales = "free", ncol = 14) +
expand_limits(y = 0) +
ylab("Bandwidth (MB/s)") +
xlab("I/O Forwarding nodes") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title.y = element_text(vjust = 0.4),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-2-complete.pdf", width = 10, height = 25)
plot
dev.off()
pdf(file="../output/figure-2-complete.pdf", width = 16, height = 16)
library(ggplot2)
plot <- ggplot(df_full[df_full$operation == 'write', ],
aes(
x = as.factor(forwarders),
y = bandwidth
)) +
geom_boxplot() +
scale_color_manual(
"",
values = c(
"#796dd5",
"#6dd5c7",
"#afd56d",
"#ef4130",
"#222222"
)
) +
facet_wrap(. ~ scenario, scales = "free", ncol = 14) +
expand_limits(y = 0) +
ylab("Bandwidth (MB/s)") +
xlab("I/O Forwarding nodes") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title.y = element_text(vjust = 0.4),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-2-complete.pdf", width = 16, height = 16)
plot
dev.off()
library(ggplot2)
plot <- ggplot(df_full[df_full$operation == 'write', ],
aes(
x = as.factor(forwarders),
y = bandwidth
)) +
geom_boxplot() +
scale_color_manual(
"",
values = c(
"#796dd5",
"#6dd5c7",
"#afd56d",
"#ef4130",
"#222222"
)
) +
facet_wrap(. ~ scenario, scales = "free", ncol = 14) +
expand_limits(y = 0) +
ylab("Bandwidth (MB/s)") +
xlab("I/O Forwarding nodes") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title.y = element_text(vjust = 0.4),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-2-complete.pdf", width = 20, height = 20)
plot
dev.off()
library(ggplot2)
plot <- ggplot(df_full[df_full$operation == 'write', ],
aes(
x = as.factor(forwarders),
y = bandwidth
)) +
geom_boxplot() +
scale_color_manual(
"",
values = c(
"#796dd5",
"#6dd5c7",
"#afd56d",
"#ef4130",
"#222222"
)
) +
facet_wrap(. ~ scenario, scales = "free", ncol = 14) +
expand_limits(y = 0) +
ylab("Bandwidth (MB/s)") +
xlab("I/O Forwarding nodes") +
theme_bw() +
theme(
legend.position = "top",
plot.title = element_text(size = 10),
axis.title.y = element_text(vjust = 0.4),
strip.background = element_rect(colour = NA, fill = NA)
)
pdf(file="../output/figure-2-complete.pdf", width = 25, height = 25)
plot
dev.off()
